---
import SnowSVG from '@components/svg/SnowSVG.astro'
import ArrowSVG from '@components/svg/ArrowSVG.astro'

interface Img {
    url: string,
    alt: string,
    href?: string
}

interface Props {
    imgs: Img[],
    className?: string
}

const { imgs, className } = Astro.props;
---

<div class=`flex sticky justify-center shadow-[inset_0px_0px_21px_11px_#1a202c] hover:shadow-[inset_0px_0px_0px_0px_#fff] transition-shadow duration-300 lg:hover:cursor-pointer ${className || ''}`>
    <!-- Buttons for previous and next images -->
    <div>
        <button id="prev-img" class="absolute z-10 top-1/2 left-2 -translate-y-full">
            <ArrowSVG direction='left' className="w-7 h-7 text-primary-200 bg-gray-800 opacity-60 rounded-xl hover:opacity-100 transition-opacity duration-200"/>
        </button>
        <button id="next-img" class="absolute z-10 top-1/2 right-2 -translate-y-full">
            <ArrowSVG direction='right' className="w-7 h-7 text-primary-200 bg-gray-800 opacity-70 rounded-xl hover:opacity-100 transition-opacity duration-200"/>
        </button>
    </div>
    
    <!-- Carousel links shaped snowflakes -->
    <div class="absolute bottom-5 z-10 flex gap-2">
        {imgs.map((_, index) => {
            return (
                <a href={`#slide-${index}`} class="slide-link text-blue-400 [&>svg]:data-[selected=true]:stroke-purple-500" data-selected="false">
                    <SnowSVG className={`w-5 h-5 opacity-70 stroke-blue-400`}/>
                </a>
            )
        })}
    </div>

    <!-- Slider carousel -->
    <div id="slider-container" class="slider-container overflow-x-scroll scroll-smooth snap-mandatory snap-x">
        <div id="slider" class="slider w-full flex relative bg-fixed max-h-[432px] aspect-[16/9] md:max-h-[60vh] transition-transform duration-500">
            {imgs.map((img, index) => {
                return (
                    <a href={ img.href || '#' } class="slide-element min-w-full sticky left-0 object-cover snap-center">
                        <img id={`slide-${index}`} src={ img.url } alt={ img.alt } class="md:w-full object-cover"/>
                    </a>
                )
            })}
        </div>
    </div>
</div>

<style>
    .slider-container::-webkit-scrollbar {
        display: none;
    }
</style>

<script>
    type Direction = 'right' | 'left'

    let slideCounter = 0;
    const sliderElements = document.querySelectorAll('.slide-element')
    const sliderLinks = document.querySelectorAll('.slide-link')

    document.getElementById('prev-img').addEventListener('click', goPrevImg)
    document.getElementById('next-img').addEventListener('click', goNextImg)

    const sliderContainer = document.getElementById('slider-container')
    const slider = document.getElementById('slider')

    function goPrevImg () {
        moveSlider('left')
    }
    
    function goNextImg () {
        moveSlider('right')
    }

    function moveSlider (direction: Direction) {
        const currentXPosition = getTransformValue()
        if (direction == 'left') {
            slider.style.transform = `translateX(calc(${currentXPosition}px + 100%))`
            slideCounter--
        }
        else {
            slider.style.transform = `translateX(calc(${currentXPosition}px - 100%))`
            slideCounter++
        }
        setCurrentSlideLink(slideCounter)
    }

    function getTransformValue () {
        const slider = document.getElementById('slider')
        return slider.getBoundingClientRect().x
    }

    function reorderSlides () {
        // takes the first or last element and reorder it for making an infinity slider
        const isLastElement = slideCounter === sliderElements.length - 1
        if (isLastElement) {
            sliderContainer.classList.add('flex-col-reverse')
        }
    }

    function setCurrentSlideLink (counter: number) {
        sliderLinks.forEach((sliderLink, index) => {
            if (sliderLink instanceof HTMLElement)
                sliderLink.dataset.selected = (index === counter)? 'true' : 'false'
        })
    }

</script>